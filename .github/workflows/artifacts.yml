name: Create epub and PDF
on:
  push:
    # tags:
    #   "*"
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   container: ghcr.io/informatica-global/pandoc-texlive-full

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v4
  #     - run: cd $GITHUB_WORKSPACE
  #     - run: mkdir target
  #     - run: pandoc --top-level-division=chapter -o target/hpmor.epub book.yaml "md/avant-propos.md" md/chapter*.md  "md/colophon.md" --lua-filter=filters/filters.lua --css ./css/epub.css --epub-embed-font fonts/Parseltongue.ttf
  #     - run: pandoc --top-level-division=chapter -o target/hpmor.pdf book.yaml "md/avant-propos.md" md/chapter*.md  "md/colophon.md" --lua-filter=filters/filters.lua --pdf-engine=xelatex --template=templates/book.tex
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: true
  #         prerelease: false
  #     - name: Upload epub
  #       id: upload-epub
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./target/hpmor.epub
  #         asset_name: hpmor.epub
  #         asset_content_type: application/epub
  #     - name: Upload pdf
  #       id: upload-pdf
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./target/hpmor.pdf
  #         asset_name: hpmor.pdf
  #         asset_content_type: application/pdf
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - run: cd $GITHUB_WORKSPACE
      - run: mkdir target
      - run: mkdir src/md
      - name: Convert markdown for mdbook
        id: convert-to-mdbook
        uses: r-lib/actions/setup-pandoc@v1
      - run: find md -type f -name '*.md' -print0 | xargs -0 -n2 -P2 -I{} pandoc {} -o src/{} -t markdown --lua-filter=filters/filters.lua
      - name: Create mdbook
        id: create-mdbook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'
      - run: mdbook build
      - name: Deploy mdbook as github pages
        id: mdbook-ghpages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/book
